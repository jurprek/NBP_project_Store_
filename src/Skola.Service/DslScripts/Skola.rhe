Module Skola
{
    Entity Ucenik
    {
        ShortString Ime { Required; }
        ShortString Prezime { Required; }
        UniqueMultiple 'Ime Prezime';
        SaveMethod
        {
            AfterSave Broji
            '
                int broj = 0;
                foreach (var item in insertedNew)
                {
                    broj++;
                } 
            ';
        }
    }

    
    Entity Profesor
    {
        ShortString Ime { Required; }
        ShortString Prezime { Required; }
    }

    Entity Predmet
    {
        ShortString Naziv { Required; Unique;}
        Reference Profesor { Required; }

        ItemFilter DuljinaNazivaPredmeta 'item => item.Naziv.Length > 100';
        InvalidData DuljinaNazivaPredmeta 'Naziv Predmeta je predugaèak';
    }

    Entity Ocjena
    {
        Reference Ucenik { Required; }
        Reference Predmet { Required; }
        Integer ocjena;

        ItemFilter MaxOcjena 'item => item.ocjena.Value > 5';
        InvalidData MaxOcjena 'Ocjena može biti maksimalno 5';

        ItemFilter MinOcjena 'item => item.ocjena.Value < 1';
        InvalidData MinOcjena 'Ocjena može biti minmalno 1';

    } 

    Computed IzracunajProsjek 
    'repository =>
    {
        var ucenici = repository.Skola.Ucenik.Query()
        .Select(u =>
            new
            {
                u.ID,
                u.Ime,
                u.Prezime
                })
        .ToList();

        var prosjeci = new List<IzracunajProsjek>();
        foreach (var ucenik in ucenici)
        {
            decimal prosjek = 0;
            int brojnost = 0;

            prosjek = 3;    //izracunaj pravi prosjek
                        
            prosjeci.Add(new IzracunajProsjek { ID = ucenik.ID, Prosjek = prosjek });
        }

        return prosjeci.ToArray();
        }
    '

    {
    Extends Skola.Ucenik;
    Decimal Prosjek;
    }



    Action CreateUcenik '(parameter, repository, userInfo) =>
    {
        var ucenik = new Skola.Ucenik
        {
            ID = parameter.ID ?? Guid.NewGuid(),
            Ime = parameter.Ime,
            Prezime = parameter.Prezime
        };
        repository.Skola.Ucenik.Insert(ucenik);
    }'
    {
        Guid ID;
        ShortString Ime;
        ShortString Prezime;
    }

    Polymorphic Ispit
    {
        datetime DatumIspita;
    }

    Entity IspitKomentar
    {
        ShortString Code { AutoCode; }
        Reference Ispit { Detail; }
        LongString Komentar;
    }

    SqlProcedure Predmeti
    '@ime VARCHAR(50), @prezime VARCHAR(50)'
    '
    BEGIN
        DECLARE @jeUcenik BIT
        DECLARE @jeProfesor BIT

        SELECT @jeUcenik = CASE WHEN EXISTS (SELECT * FROM Skola.Ucenik WHERE Ime = @ime AND Prezime = @prezime) THEN 1 ELSE 0 END
        SELECT @jeProfesor = CASE WHEN EXISTS (SELECT * FROM Skola.Profesor WHERE Ime = @ime AND Prezime = @prezime) THEN 1 ELSE 0 END

        IF (@jeUcenik = 1)
            BEGIN
                SELECT P.Naziv as PohadjaPredmet, OU.Ocjena 
                FROM Skola.Ocjena OU 
                JOIN Predmet P ON OU.PredmetID = P.ID 
                WHERE OU.UcenikID = (SELECT ID FROM Skola.Ucenik WHERE Ime = @ime AND Prezime = @prezime)
            END
        ELSE IF (@jeProfesor = 1)
            BEGIN
                SELECT P.Naziv as PredajePredmet
                FROM Skola.Predmet P 
                JOIN Profesor Prof ON Prof.ID = P.ProfesorID
                WHERE Prof.Ime = @ime AND Prof.Prezime = @prezime
            END
    END
    ';
    
    SqlView Ocjene
    '
    SELECT
	    U.Ime AS ImeUcenika,
	    U.Prezime AS PrezimeUcenika,
	 
	    PR.Ime AS ImeProfesora,
	    PR.Prezime AS PrezimeProfesora,
	
	    p.Naziv AS NazivPredmeta,
	    OU.Ocjena AS ZakljucnaOcjena
    FROM Skola.Ucenik U
    INNER JOIN Ocjena OU ON U.ID = OU.UcenikID
    INNER JOIN Predmet P ON OU.PredmetID = P.ID
    INNER JOIN Profesor PR ON P.ProfesorID = PR.ID;
    ';
}

